// Copyright 2024 ETH Zurich and University of Bologna.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Automatically generated by:
// scripts/gen_xbar.py -in 4 -on 2 -o ../../src/selector.sv
module selector #(
    parameter int InNum = 4,
    parameter int OutNum = 2
) (
    input  logic [InNum-1:0] req_vector_i,
    input  logic [$clog2(InNum)-1:0] priority_i,
    output logic [OutNum-1:0][$clog2(InNum)-1:0] sel_inport_idx_o,
    output logic [InNum-1:0][$clog2(OutNum)-1:0] asn_outport_idx_o,
    output logic [InNum-1:0]                     asn_outport_vld_o
);

initial begin
    assert (InNum == 4) else $fatal(1, "Parameter InNum does not match expected value 4");
    assert (OutNum == 2) else $fatal(1, "Parameter OutNum does not match expected value 2");
end

logic [OutNum-1:0][$clog2(InNum)-1:0] sel_inport_idx_raw;
logic [OutNum-1:0]                    sel_inport_idx_raw_vld;
logic [InNum-1:0]                     req_vector_rotate;

assign req_vector_rotate = (priority_i == '0) ? req_vector_i :
                           ((req_vector_i << (InNum -priority_i)) | (req_vector_i >> priority_i));


always_comb begin
    for(int i = 0; i < OutNum; i++) begin
        if(sel_inport_idx_raw[i] < (InNum - priority_i)) begin
            sel_inport_idx_o[i] = sel_inport_idx_raw [i] + priority_i;
        end else begin
            sel_inport_idx_o[i] = sel_inport_idx_raw [i] - (InNum - priority_i);
        end
    end
end

always_comb begin
    asn_outport_idx_o = '0;
    asn_outport_vld_o = '0;
    for(int i = 0; i < OutNum; i++) begin
        if(sel_inport_idx_raw_vld[i] == 1'b1) begin
            asn_outport_idx_o[sel_inport_idx_o[i]] = i;
            asn_outport_vld_o[sel_inport_idx_o[i]] = 1'b1;
        end
    end
end

always_comb begin
    sel_inport_idx_raw     = '0;
    sel_inport_idx_raw_vld = '0;
    case (req_vector_rotate)
        4'b0000: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b0;
            sel_inport_idx_raw    [1] = 2'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
        end
        4'b0001: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
        end
        4'b0010: begin
            sel_inport_idx_raw    [0] = 2'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
        end
        4'b0011: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b0100: begin
            sel_inport_idx_raw    [0] = 2'd2;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
        end
        4'b0101: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b0110: begin
            sel_inport_idx_raw    [0] = 2'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b0111: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b1000: begin
            sel_inport_idx_raw    [0] = 2'd3;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd0;
            sel_inport_idx_raw_vld[1] = 1'b0;
        end
        4'b1001: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b1010: begin
            sel_inport_idx_raw    [0] = 2'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b1011: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b1100: begin
            sel_inport_idx_raw    [0] = 2'd2;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd3;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b1101: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b1110: begin
            sel_inport_idx_raw    [0] = 2'd1;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd2;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        4'b1111: begin
            sel_inport_idx_raw    [0] = 2'd0;
            sel_inport_idx_raw_vld[0] = 1'b1;
            sel_inport_idx_raw    [1] = 2'd1;
            sel_inport_idx_raw_vld[1] = 1'b1;
        end
        default: /*do nothing */;
    endcase
end

endmodule
